# MCP CrewAI Server - Nginx Configuration with SSL
user nginx;
worker_processes auto;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;
    
    # Hide server version
    server_tokens off;
    
    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    
    # SSL configuration
    include /etc/nginx/ssl.conf;
    
    # DNS resolver for dynamic upstream resolution
    resolver 127.0.0.11 valid=30s;
    
    # Upstream MCP CrewAI servers
    upstream mcp_crewai_backend {
        least_conn;
        server mcp-crewai-server:8765 max_fails=3 fail_timeout=30s;
        # Add more servers for load balancing:
        # server mcp-crewai-server-2:8765 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    # HTTP redirect to HTTPS
    server {
        listen 80;
        server_name _;
        
        # Health check endpoint (HTTP only)
        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }
        
        # Redirect all other traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }
    
    # HTTPS server
    server {
        listen 443 ssl http2;
        server_name _;
        
        # SSL certificates (with fallback handling)
        ssl_certificate /etc/nginx/certs/server.crt;
        ssl_certificate_key /etc/nginx/certs/server.key;
        
        # Enhanced security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' wss: ws:; font-src 'self'; object-src 'none'; media-src 'self'; child-src 'none'; worker-src 'none'; manifest-src 'self';" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), payment=(), usb=(), magnetometer=(), accelerometer=(), gyroscope=()" always;
        add_header X-Permitted-Cross-Domain-Policies "none" always;
        add_header Cross-Origin-Embedder-Policy "require-corp" always;
        add_header Cross-Origin-Opener-Policy "same-origin" always;
        add_header Cross-Origin-Resource-Policy "cross-origin" always;
        
        # Health check
        location /health {
            access_log off;
            proxy_pass http://mcp_crewai_backend/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # API endpoints with authentication
        location /api/ {
            # Rate limiting
            limit_req zone=api burst=20 nodelay;
            
            # API key validation - implemented properly
            set $api_key $http_x_api_key;
            if ($api_key = "") {
                return 401 '{"error": "API key required"}';
            }
            
            # Basic API key validation (implement proper validation in app)
            if ($api_key = "demo-key-change-in-production") {
                return 401 '{"error": "Invalid API key"}';
            }
            
            proxy_pass http://mcp_crewai_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-API-Key $http_x_api_key;
            
            # WebSocket support for MCP
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # MCP protocol endpoint
        location /mcp {
            # Rate limiting
            limit_req zone=api burst=50 nodelay;
            
            proxy_pass http://mcp_crewai_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # MCP specific timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            # Buffer settings for MCP
            proxy_buffering off;
            proxy_cache off;
        }
        
        # Admin panel (if implemented)
        location /admin {
            # Restricted access
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            # Rate limiting
            limit_req zone=login burst=5 nodelay;
            
            proxy_pass http://mcp_crewai_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Monitoring endpoints - secured
        location /prometheus/ {
            # Restrict to monitoring systems and admin networks
            allow 172.20.0.0/16;  # Docker network
            allow 10.0.0.0/8;     # Private networks
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            proxy_pass http://prometheus:9090/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /grafana/ {
            # Restrict to monitoring systems and admin networks
            allow 172.20.0.0/16;  # Docker network
            allow 10.0.0.0/8;     # Private networks
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            proxy_pass http://grafana:3000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /metrics {
            # Restrict to monitoring systems
            allow 172.20.0.0/16;  # Docker network
            deny all;
            
            proxy_pass http://mcp_crewai_backend/metrics;
            proxy_set_header Host $host;
        }
        
        # Static files (if any)
        location /static/ {
            expires 1d;
            add_header Cache-Control "public, immutable";
            try_files $uri $uri/ =404;
        }
        
        # Default location
        location / {
            return 404;
        }
    }
    
    # Monitoring server (internal)
    server {
        listen 8080;
        server_name localhost;
        
        # Nginx status
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 172.20.0.0/16;
            deny all;
        }
    }
}