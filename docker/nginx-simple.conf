# MCP CrewAI Server - Simple Nginx Configuration (No SSL)
user nginx;
worker_processes auto;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;
    
    # Hide server version
    server_tokens off;
    
    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    
    # DNS resolver for dynamic upstream resolution
    resolver 127.0.0.11 valid=30s;
    
    # Main server
    server {
        listen 80;
        server_name _;
        
        # Health check endpoint
        location /health {
            access_log off;
            proxy_pass http://mcp-crewai-server:8765/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Handle upstream errors gracefully
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # Fallback for when upstream is not ready
            error_page 502 503 504 = @fallback_health;
        }
        
        # Fallback health check
        location @fallback_health {
            access_log off;
            return 503 "Service Temporarily Unavailable - MCP Server Starting\n";
            add_header Content-Type text/plain;
        }
        
        # MCP protocol endpoint
        location /mcp {
            # Rate limiting
            limit_req zone=api burst=50 nodelay;
            
            proxy_pass http://mcp-crewai-server:8765;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # MCP specific timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            # Buffer settings for MCP
            proxy_buffering off;
            proxy_cache off;
            
            # Handle upstream errors
            error_page 502 503 504 = @fallback_unavailable;
        }
        
        # API endpoints
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://mcp-crewai-server:8765;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support for MCP
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            error_page 502 503 504 = @fallback_unavailable;
        }
        
        # Monitoring endpoints
        location /metrics {
            proxy_pass http://mcp-crewai-server:8765/metrics;
            proxy_set_header Host $host;
            
            error_page 502 503 504 = @fallback_unavailable;
        }
        
        # Fallback for unavailable service
        location @fallback_unavailable {
            return 503 '{"error": "MCP CrewAI Server is starting up. Please try again in a moment."}';
            add_header Content-Type application/json;
        }
        
        # Default location
        location / {
            return 200 '{"message": "MCP CrewAI Server", "status": "running", "endpoints": ["/health", "/mcp", "/api/", "/metrics"]}';
            add_header Content-Type application/json;
        }
    }
    
    # Monitoring server (internal)
    server {
        listen 8080;
        server_name localhost;
        
        # Nginx status
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 172.20.0.0/16;
            deny all;
        }
    }
}